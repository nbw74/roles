---
- name: Initial bitrix webroot content
  shell: >
    cp -ru --preserve=mode /home/bitrix/www/* {{ vhost_basedir }}/{{ item.user|d(item.name) }}/{{ item.webroot|d('www') }}/
    && chown -R {{ item.user|d(item.name) }}:{{ item.user|d(item.name) }}
    {{ vhost_basedir }}/{{ item.user|d(item.name) }}/{{ item.webroot|d('www') }}
  args:
    creates: "{{ vhost_basedir }}/{{ item.user|d(item.name) }}/{{ item.webroot|d('www') }}/index.php"
  when:
    - item.state|d(true)
    - not item.legacy|d()
    - item.nginx_301_only is not defined
  with_items: "{{ vhost }}"
  loop_control:
    label: "{{ item.name }}"

- name: Check umask in dbconn.php
  lineinfile:
    path: "{{ vhost_basedir }}/{{ item[0].user|d(item[0].name) }}/{{ item[0].webroot|d('www') }}/bitrix/php_interface/dbconn.php"
    regexp: 'define.+BX_{{ item[1] }}_PERMISSIONS'
    line: 'define("BX_{{ item[1] }}_PERMISSIONS", {{ (item[1] == "FILE")|ternary("0664", "0775") }});'
    insertbefore: '\?>$'
  when:
    - item[0].state|d(true)
    - item[0].nginx_301_only is not defined
  with_nested:
    - "{{ vhost }}"
    - [ 'FILE', 'DIR' ]
  loop_control:
    label: "{{ item[0].name }}:{{ item[1] }}"
  ignore_errors: yes

- name: PHP sessions and upload dirs
  file:
    path: "/tmp/{{ item[1] }}/{{ item[0].user|d(item[0].name) }}"
    state: "{{ item[0].state|d(true)|ternary('directory','absent') }}"
    owner: apache
    group: "{{ item[0].user|d(item[0].name) }}"
    mode: 0770
  with_nested:
    - "{{ vhost }}"
    - [ 'php_sessions', 'php_upload' ]
  loop_control:
    label: "{{ item[0].name }}:{{ item[1] }}"

- name: Bitrix cron task present
  cron:
    name: Standard bitrix cron task
    user: "{{ item.user|d(item.name) }}"
    job: >
      test -f
      {{ vhost_basedir }}/{{ item.user|d(item.name) }}/{{ item.webroot|d('www') }}/bitrix/modules/main/tools/cron_events.php
      && { /usr/bin/php -f
      {{ vhost_basedir }}/{{ item.user|d(item.name) }}/{{ item.webroot|d('www') }}/bitrix/modules/main/tools/cron_events.php;
      } >/dev/null 2>&1
    state: present
  when:
    - item.state|d(true)
    - item.nginx_301_only is not defined
  with_items: "{{ vhost }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Template user's msmtprc"
  template:
    src: "msmtprc.j2"
    dest: "{{ vhost_basedir }}/{{ item.user|d(item.name) }}/.msmtprc"
    owner: "{{ item.user|d(item.name) }}"
    group: "{{ item.user|d(item.name) }}"
    mode: 0600
  when:
    - item.state|d(true)
    - item.nginx_301_only is not defined
  with_items: "{{ vhost }}"
  loop_control:
    label: "{{ item.name }}"

- name: Template apache msmtprc
  template:
    src: "msmtprc.j2"
    dest: "{{ vhost_basedir }}/{{ item.user|d(item.name) }}/.msmtprc_httpd"
    owner: apache
    group: apache
    mode: 0600
  when:
    - item.state|d(true)
    - item.nginx_301_only is not defined
  with_items: "{{ vhost }}"
  loop_control:
    label: "{{ item.name }}"

- name: Present .htsecure if redirect
  copy:
    dest: "{{ vhost_basedir }}/{{ item.user|d(item.name) }}/www/.htsecure"
    content: >
      # THIS FILE IS MANAGED BY ANSIBLE
    owner: "{{ item.user|d(item.name) }}"
    group: "{{ item.user|d(item.name) }}"
    mode: 0644
  when:
    - item.state|d(true)
    - item.crypto|d('none') == 'redirect'
    - item.nginx_301_only is not defined
  with_items: "{{ vhost }}"
  loop_control:
    label: "{{ item.name }}"

- name: Absent .htsecure if no redirect
  file:
    path: "{{ vhost_basedir }}/{{ item.user|d(item.name) }}/www/.htsecure"
    state: absent
  when:
    - item.state|d(true)
    - item.crypto|d('none') != 'redirect'
    - item.nginx_301_only is not defined
  with_items: "{{ vhost }}"
  loop_control:
    label: "{{ item.name }}"

- name: Include multisite
  include_tasks: bitrix-multisite.yml
  when:
    - multi[0].state|d(true)
    - multi[0].nginx_301_only is not defined
  with_subelements:
    - "{{ vhost }}"
    - bitrix_multisite
    - flags:
      skip_missing: true
  loop_control:
    loop_var: multi
    label: "{{ multi[0].name }}:{{ multi[1].name }}"

- name: Find acl flag files
  find:
    paths: [ '/var/lib/flags' ]
    patterns: "acl_*"
  register: reg_find_acl_flags

- name: Set acl flags list
  set_fact:
    acl_flags: "{{ reg_find_acl_flags.files|json_query('[*].path') }}"

- name: Include acl
  include_tasks: bitrix-acl.yml
  when:
    - acl.state|d(true)
    - acl.nginx_301_only is not defined
  with_items: "{{ vhost }}"
  loop_control:
    loop_var: acl
    label: "{{ acl.name }}"
...
