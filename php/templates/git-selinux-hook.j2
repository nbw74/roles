#!/bin/bash
# THIS FILE IS ANSIBLE MANAGED
# Git hook for launch restorecon after pull and clone
# vim: set ft=sh:

set -o nounset
set -o errtrace
set -o pipefail

# DEFAULTS BEGIN
{% if item == "post-checkout" %}
readonly ARGS="hook: {{ item }}, prev_HEAD: ${1:--}, new_HEAD: ${2:--}, branch_checkout_flag: ${3:--}"
{% elif item == "post-merge" %}
readonly ARGS="hook: {{ item }}, squash_merge: ${1:--}"
{% else %}
readonly ARGS="NO ARGS"
{% endif %}
# DEFAULTS END

{% raw %}
# CONSTANTS BEGIN
readonly PATH=/bin:/usr/bin:/sbin:/usr/sbin
readonly bn="$(basename "$0")"
readonly pwd="$(pwd)"
readonly LOGERR=$(mktemp --tmpdir "${bn%\.*}.XXXX")
readonly BIN_REQUIRED="sestatus restorecon"
# CONSTANTS END

main() {
    local fn=${FUNCNAME[0]}

    trap 'except $LINENO' ERR
    trap _exit EXIT

    touch "$LOGERR"
    exec 4>&2		# Link file descriptor #4 with stderr. Preserve stderr
    exec 2>>"$LOGERR"	# stderr replaced with file $LOGERR

    checks
{% endraw %}
{% if item == "post-checkout" %}

    if [[ "$HOME" == "$(dirname "$pwd")" ]]; then
	( shopt -s dotglob; mv -- * .. )
	cd ..
	rmdir "$(basename "$pwd")"
    fi
{% endif %}
{% raw %}
    logger -p user.info -t "$bn" "* INFO: pwd: $PWD, ${ARGS}"
    restorecon -r "${HOME}/www"

    exit 0
}

checks() {
    local fn=${FUNCNAME[0]}

    if [[ ! -f /etc/redhat-release ]]; then
	exit 0
    fi

    for i in $BIN_REQUIRED; do
        if ! command -v "$i" >/dev/null
        then
            echo "Required binary '$i' is not installed" >&2
            false
        fi
    done

    if sestatus | head -1 | grep -q disabled; then
	exit 0
    fi

}

except() {
    local ret=$?
    local no=${1:-no_line}

    if [[ -t 1 ]]; then
        echo "* FATAL: error occured in function '$fn' near line ${no}. Stderr: '$(awk '$1=$1' ORS=' ' "${LOGERR}")'"
    fi

    logger -p user.err -t "$bn" "* FATAL: error occured in function '$fn' near line ${no}. Stderr: '$(awk '$1=$1' ORS=' ' "${LOGERR}")'"
    exit $ret
}

_exit() {
    local ret=$?

    exec 2>&4 4>&-	# Restore stderr and close file descriptor #4

    [[ -f $LOGERR ]] && rm "$LOGERR"
    exit $ret
}

main

{% endraw %}
## EOF ##
