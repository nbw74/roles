---
- name: Check if VM disk already exists
  stat:
    path: "{{ item[1].matches[0].path }}/vm_{{ item[0].name }}"
  when:
    - item[0].name not in kvm_existing_vms.list_vms
    - item[0].state|d('running') != 'undefined'
  with_together:
    - "{{ kvm_vm }}"
    - "{{ kvm_pool_xml_path.results }}"
  loop_control:
    label: "{{ item[0].name }}"
  register: kvm_disk_stat
  changed_when: kvm_disk_stat.stat.exists

- name: Fails is VM disk image already exists
  fail:
    msg: "FATAL: VM DISK IMAGE ALREADY EXISTS"
  when:
    - kvm_disk_stat is defined
    - item.changed
    - item.stat.exists
    - not kvm_accept_existing_disks
  with_items: "{{ kvm_disk_stat.results }}"
  loop_control:
    label: "{{ (item.stat|default(dict(path='null')))['path']|d('null') }}"

- include_tasks: get_images.yml

- include_tasks: sysprep.yml

- name: Virt undefine
  virt:
    name: "{{ item[0].name }}"
    command: "{{ item[1] }}"
  when:
    - item[0].name in kvm_existing_vms.list_vms
    - item[0].state|d('running') == 'undefined'
  with_nested:
    - "{{ kvm_vm }}"
    - [ 'destroy', 'undefine' ]
  loop_control:
    label: "{{ item[0].name }}:{{ item[1] }}"
  ignore_errors: yes

- name: LV for VM disk
  lvol:
    lv: "vm_{{ item[0].name }}"
    vg: "{{ item[1].matches[0].path|basename }}"
    size: "{{ item[0].disk_gb|d('16') }}G"
    state: "{{ (item[0].state|d('running') == 'undefined')|ternary('absent','present') }}"
    force: "{{ (item[0].state|d('running') == 'undefined')|ternary('yes','no') }}"
  when: >
    ((item[0].name not in kvm_existing_vms.list_vms and item[0].state|d('running') != 'undefined') or
    (item[0].name in kvm_existing_vms.list_vms and item[0].state|d('running') == 'undefined')) and
    item[2].matches[0].pool.type == 'logical'
  with_together:
    - "{{ kvm_vm }}"
    - "{{ kvm_pool_xml_path.results }}"
    - "{{ kvm_pool_xml_type.results }}"
  loop_control:
    label: "{{ item[0].name }}"

- name: Create VM disk from template (with virt-sysprep)
  shell: >
    virt-sysprep --quiet --operations customize,lvm-uuids
    {{ kvm_leave_hostname|ternary('','--hostname ' ~ item[0].sysprep_hostname|d(item[0].name) ~ '.' ~
    item[0].sysprep_domain|default(ansible_nodename.split(".")[1:]|join("."))) }}
    --copy-in {{ kvm_templates_path }}/{{ item[0].name }}:/var/local
    --run-command 'mv /var/local/{{ item[0].name }}/* /etc/sysconfig/network-scripts'
    {{ (item[0].sysprep_root_pass is defined)
    |ternary('--root-password password:' ~ item[0].sysprep_root_pass|d(),'') }}
    {{ (kvm_sysprep_root_key is defined)
    |ternary('--ssh-inject "root:string:' ~ kvm_sysprep_root_key ~ '"'|d(),'') }}
    -a {{ kvm_templates_path }}/{{ item[0].template_name }} &&
    qemu-img convert -q -O {{ item[0].disk_format|d('raw') }}
    {{ kvm_templates_path }}/{{ item[0].template_name }}
    {{ item[1].matches[0].path }}/vm_{{ item[0].name }}
  when:
    - item[0].name not in kvm_existing_vms.list_vms
    - item[0].state|d('running') != 'undefined'
    - not item[2].stat.exists
  with_together:
    - "{{ kvm_vm }}"
    - "{{ kvm_pool_xml_path.results }}"
    - "{{ kvm_disk_stat.results }}"
  loop_control:
    label: "{{ item[0].name|d('null') }}"

- include_tasks: rm_images.yml

- name: Resize VM image (file)
  command: >
    qemu-img resize -q {{ item[1].matches[0].path }}/vm_{{ item[0].name }}
    {{ item[0].disk_gb|d('16') }}G
  when:
    - item[0].name not in kvm_existing_vms.list_vms
    - item[0].state|d('running') != 'undefined'
    - item[2].matches[0].pool.type == "dir"
  with_together:
    - "{{ kvm_vm }}"
    - "{{ kvm_pool_xml_path.results }}"
    - "{{ kvm_pool_xml_type.results }}"
  loop_control:
    label: "{{ item[0].name }}:{{ item[0].disk_gb|d('16') }}"

- name: Template VM XML (local)
  become: no
  template:
    src: "vm.j2"
    dest: "{{ kvm_tmp_dir }}/{{ ansible_nodename }}-vm-{{ item[0].name }}.xml.j2"
  when:
    - item[0].name not in kvm_existing_vms.list_vms
    - item[0].state|d('running') != 'undefined'
  with_together:
    - "{{ kvm_vm }}"
    - "{{ kvm_pool_xml_path.results }}"
    - "{{ kvm_pool_xml_type.results }}"
  loop_control:
    label: "{{ item[0].name }}"
  delegate_to: localhost

- name: Virt define
  virt:
    command: define
    name: "{{ item.name }}"
    xml: "{{ lookup('template',  kvm_tmp_dir ~ '/' ~ ansible_nodename ~ '-vm-' ~ item.name ~ '.xml.j2') }}"
  when:
    - item.name not in kvm_existing_vms.list_vms
    - item.state|d('running') != 'undefined'
  with_items: "{{ kvm_vm }}"
  loop_control:
    label: "{{ item.name }}"
...
