---
- name: Packages installed
  become: yes
  yum:
    name: "{{ env_packages }}"
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version|int < 8

- name: Sudoers (I)
  become: yes
  lineinfile:
    path: "/etc/sudoers"
    regexp: '^(Defaults\s+always_set_home)'
    line: '# \1'
    backrefs: yes

- name: Check if path exists
  stat:
    path: '/home/{{ username }}/.dotfiles'
  register: check_path

- name: Git update
  git:
    repo: '{{ repo }}'
    dest: '/home/{{ username }}/.dotfiles'
    clone: no
    update: yes
    accept_hostkey: yes
  when: check_path.stat.exists

- name: Git clone
  git:
    repo: '{{ repo }}'
    dest: '/home/{{ username }}/.dotfiles'
    clone: yes
    accept_hostkey: yes
  when: not check_path.stat.exists

- name: Stat dotfiles
  stat:
    path: "{{ item }}"
  loop: "{{ env_dotfiles }}"
  register: env_reg_df_stat

- name: Remove files if not link
  file:
    path: "{{ item.stat.path }}"
    state: absent
  when:
    - not item.stat.islnk|d()
    - item.stat.exists
  loop: "{{ env_reg_df_stat.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Check symlinks
  file:
    src: '.dotfiles/{{ item }}'
    path: '{{ item }}'
    state: link
    force: yes
  loop: "{{ env_dotfiles }}"

- name: Check MC config dir
  file:
    path: .config/mc
    state: directory

- name: Check MC ini symlink
  file:
    src: '../../.dotfiles/.config/mc/ini'
    path: '.config/mc/ini'
    state: link

- name: Attrib file (touch)
  file:
    state: touch
    path: "/home/{{ username }}/{{ prompt_file }}"
  changed_when: false

- name: Set prompt fact if host
  set_fact:
    prompt_color_user: 'GREEN'
    prompt_color_root: 'RED'
  when: ansible_virtualization_role == "host" or ansible_virtualization_role is undefined

- name: Set prompt fact if guest
  set_fact:
    prompt_color_user: 'CYAN'
    prompt_color_root: 'YELLOW'
  when: ansible_virtualization_role == "guest"

- name: Set env color
  set_fact:
    prompt_color_env: "{{ env_color[env|d('auxiliary')] }}"

- name: Attrib file
  blockinfile:
    dest: "/home/{{ username }}/{{ prompt_file }}"
    block: |
      # Username color (phy=GREEN, virt=CYAN)
      PR_USER=${PR_BR_{{ prompt_color_user }}}
      # Root user color (phy=RED, virt=YELLOW)
      PR_ROOT=${PR_BR_{{ prompt_color_root }}}
      # Hostname color (prod=RED, test=GREEN, staging=YELLOW, aux=BLUE, localhost=MAGENTA)
      PR_HOST=${PR_BR_{{ prompt_color_env }}}

- name: Check tmp dir
  file:
    state: directory
    path: '/home/{{ username }}/.tmp'
    owner: '{{ username }}'

- name: Touch .viminfo
  become: yes
  file:
    state: touch
    path: "/home/{{ username }}/.viminfo"
    owner: "{{ username }}"
  changed_when: false

- name: Check user shell
  become: yes
  user:
    name: "{{ username }}"
    shell: "/bin/zsh"

- name: SSH key
  authorized_key:
    user: "{{ username }}"
    state: present
    key: "{{ lookup('file', '/home/' ~ addkey_user|default(username) ~ '/.ssh/id_rsa.pub') }}"
  when: addkey

- name: Check if psql present
  stat:
    path: /usr/bin/psql
  register: myenv_reg_psql

- name: psqlrc section
  block:
    - name: env block
      blockinfile:
        path: "/home/{{ username }}/.zshenv"
        marker: "# {mark} ANSIBLE MANAGED BLOCK: PSQLRC"
        block: |
          export PGUSER="postgres"
        create: yes

    - name: psqlrc
      copy:
        src: psqlrc
        dest: "/home/{{ username }}/.psqlrc"
  when: myenv_reg_psql.stat.exists
...
