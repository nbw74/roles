---
- name: Check flags dir
  file:
    path: "{{ flags_dir }}/postgresql"
    state: directory
    owner: postgres
  delegate_to: "{{ item.db.host }}"
  loop: "{{ vhost|selectattr('db', 'defined')|selectattr('db.type', 'eq', 'postgresql')|list }}"
  loop_control:
    label: "{{ item.name }}"
  tags: [ db ]

- name: Attempt dump and manage postgresql database
  block:
    - name: dump postgresql database
      postgresql_db:
        name: "{{ item[0].db.name }}"
        state: dump
        target: "{{ vhost_preserve }}/{{ item[0].db.name }}-{{ vhost_timestamp }}.sql"
        target_opts: "-Fc -Z9"
        login_host: "{{ item[0].db.host }}"
        port: "{{ item[0].db.port|d('5432') }}"
        login_user: "{{ vhost_db_admin.pgsql.user|d('ansible') }}"
        login_password: "{{ vhost_db_admin.pgsql.pass }}"
        ssl_mode: disable
      register: vhost_dump_pgsql_result
      when:
        - item[0].db is defined
        - item[0].db.type == 'postgresql'
        - item[1].changed
        - item[1].state == 'absent'
      failed_when:
        - vhost_dump_pgsql_result.failed
        - "'database \"' ~ item[0].db.name ~ '\" does not exist' not in vhost_dump_pgsql_result.msg"
      loop: "{{ vhost|zip(vhost_user_del.results)|list }}"
      loop_control:
        label: "{{ item[0].name }}"
      tags: [ db ]
  rescue:
    - name: Create user back if dump error
      user:
        name: "{{ item[0].user|d(item[0].name) }}"
        create_home: no
        state: present
      when:
        - item[0].db is defined
        - item[0].db.type == 'postgresql'
        - item[1].changed
        - item[1].state|d('present') == 'absent'
      loop: "{{ vhost|zip(vhost_user_del.results)|list }}"
      loop_control:
        label: "{{ item[0].user|d(item[0].name) }}"
      tags: [ db ]

    - name: Exit
      fail:
        msg: "POSTGRESQL DUMP ERROR"
      tags: [ db ]

- name: add postgresql user
  postgresql_user:
    name: "{{ item.db.name }}"
    password: "{{ item.db.pass }}"
    encrypted: yes
    state: present
    role_attr_flags: LOGIN,NOSUPERUSER
    login_host: "{{ item.db.host }}"
    port: "{{ item.db.port|d('5432') }}"
    login_user: "{{ vhost_db_admin.pgsql.user|d('ansible') }}"
    login_password: "{{ vhost_db_admin.pgsql.pass }}"
    ssl_mode: disable
  loop: "{{ vhost|selectattr('db', 'defined')|selectattr('db.type', 'eq', 'postgresql')|rejectattr('state', 'sameas', False)|list }}"
  loop_control:
    label: "{{ item.name }}"
  tags: [ db ]

- name: manage postgresql database
  postgresql_db:
    name: "{{ item.db.name }}"
    owner: "{{ item.db.name }}"
    state: "{{ item.state|d(true)|ternary('present', 'absent') }}"
    login_host: "{{ item.db.host }}"
    port: "{{ item.db.port|d('5432') }}"
    login_user: "{{ vhost_db_admin.pgsql.user|d('ansible') }}"
    login_password: "{{ vhost_db_admin.pgsql.pass }}"
    ssl_mode: disable
  register: vhost_delete_pgsql_result
  failed_when:
    - vhost_delete_pgsql_result is failed
    - vhost_delete_pgsql_result.msg is not search('is being accessed by other users')
  loop: "{{ vhost|selectattr('db', 'defined')|selectattr('db.type', 'eq', 'postgresql')|list }}"
  loop_control:
    label: "{{ item.name }}"
  tags: [ db ]

- name: manage postgresql extensions
  postgresql_ext:
    db: "{{ item.0.db.name }}"
    name: "{{ item.1 }}"
    state: present
    login_host: "{{ item.0.db.host }}"
    port: "{{ item.0.db.port|d('5432') }}"
    login_user: "{{ vhost_db_admin.pgsql.user|d('ansible') }}"
    login_password: "{{ vhost_db_admin.pgsql.pass }}"
  when:
    - item.0.db is defined
    - item.0.db.type == 'postgresql'
  loop: "{{ vhost|subelements('db.extensions', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.name }}"
  tags: [ db ]

- name: delete postgresql user
  postgresql_user:
    name: "{{ item.db.name }}"
    state: absent
    login_host: "{{ item.db.host }}"
    port: "{{ item.db.port|d('5432') }}"
    login_user: "{{ vhost_db_admin.pgsql.user|d('ansible') }}"
    login_password: "{{ vhost_db_admin.pgsql.pass }}"
    ssl_mode: disable
  register: vhost_delete_pgsql_user_result
  failed_when:
    - vhost_delete_pgsql_user_result is failed
    - vhost_delete_pgsql_user_result.msg is not search('nable to remove user')
  loop: "{{ vhost|selectattr('db', 'defined')|selectattr('db.type', 'eq', 'postgresql')|selectattr('state', 'sameas', false)|list }}"
  loop_control:
    label: "{{ item.name }}"
  tags: [ db ]

- name: line in pg_hba
  lineinfile:
    path: "{{ item[1].stdout }}/pg_hba.conf"
    regexp: 'host\s+{{ item[0].db.name }}\s+{{ item[0].db.name }}'
    line: "host\t{{ item[0].db.name }}\t{{ item[0].db.name }}\t{% if item[0].db.pgbouncer is defined %}{{ item[0].db.pgbouncer.ip|d('127.0.0.1/32') }}{% else %}0.0.0.0/0{% endif %}\t\tmd5"  # noqa 204
    insertbefore: '#+\s*ANSIBLE MANAGED'
    state: "{{ item[0].state|d(true)|ternary('present', 'absent') }}"
  delegate_to: "{{ item[0].db.host }}"
  register: vhost_pgsql_hba_line
  when:
    - item[0].db is defined
    - item[0].db.type == 'postgresql'
  loop: "{{ vhost|zip(vhost_pgsql_datadir.results)|list }}"
  loop_control:
    label: "{{ item[0].name }}"
  notify: config reload postgresql
  tags: [ db ]

- name: line in pgbouncer config
  lineinfile:
    path: "/etc/pgbouncer/vhost.ini"
    regexp: '{{ item.db.name }}\s+=\s+host'
    line: "{{ item.db.name }} = host={{ item.db.pgbouncer.db_host|d('127.0.0.1') }} dbname={{ item.db.name }} user={{ item.db.name }} pool_size={{ item.db.pgbouncer.pool_size|d('40') }}"  # noqa 204
    state: "{{ item.state|d(true)|ternary('present', 'absent') }}"
  delegate_to: "{{ item.db.pgbouncer.host }}"
  register: vhost_pgsql_ini_line
  when:
    - item.db is defined
    - item.db.type == 'postgresql'
    - item.db.pgbouncer is defined
  loop: "{{ vhost }}"
  loop_control:
    label: "{{ item.name }}"
  notify: config reload pgbouncer
  tags: [ db ]

- name: line in userlist.txt
  lineinfile:
    path: "/etc/pgbouncer/userlist.txt"
    regexp: '^[ "]*{{ item.db.name }}[ "]+'
    line: "\"{{ item.db.name }}\"\t\"{{ item.db.pass }}\""
    insertafter: EOF
    state: "{{ item.state|d(true)|ternary('present', 'absent') }}"
  delegate_to: "{{ item.db.pgbouncer.host }}"
  register: vhost_pgsql_txt_line
  when:
    - item.db is defined
    - item.db.type == 'postgresql'
    - item.db.pgbouncer is defined
  loop: "{{ vhost }}"
  loop_control:
    label: "{{ item.name }}"
  notify: config reload pgbouncer
  tags: [ db ]
...
