---
- name: Verify role requirements
  assert:
    that:
      - inventory_hostname in groups['pacemaker']
      - ansible_distribution_file_variety == "RedHat"
      - ansible_distribution_major_version|int >= 7

- name: Pacemaker packages
  yum:
    name: "{{ pcmk_packages }}"

- name: Get pcs status (just in case?)
  command: >
    pcs status
  register: pcmk_reg_status
  changed_when: false
  failed_when:
    - pcmk_reg_status.rc != 0
    - pcmk_reg_status.stderr is not search('cluster is not currently running on this node')

- name: Get pcs cluster status
  command: >
    pcs cluster status
  register: pcmk_reg_cluster_status
  changed_when: false
  failed_when:
    - pcmk_reg_cluster_status.rc != 0
    - pcmk_reg_cluster_status.stderr is not search('cluster is not currently running on this node')

- name: Password + iptables section
  block:
    - name: Generate password
      set_fact:
        pcmk_hacluster_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits') }}"
      when: inventory_hostname == pcmk_master

    - name: Set password fact
      set_fact:
        pcmk_hacluster_password: "{{ hostvars[pcmk_master]['pcmk_hacluster_password'] }}"
      when: inventory_hostname != pcmk_master

    - name: Set hacluster password
      user:
        name: hacluster
        password: "{{ pcmk_hacluster_password|password_hash('sha512', '3454') }}"

    - name: Get iptables status
      command: >
        iptables-save -t filter
      register: pcmk_reg_iptables
      changed_when: false

    - name: Iptables section
      block:
        - name: Allow UDP traffic
          iptables:
            chain: INPUT
            protocol: udp
            destination_port: 5404:5406
            jump: ACCEPT
            action: insert
            rule_num: 5
            comment: ALLOW COROSYNC UNICAST

        - name: Allow TCP traffic
          iptables:
            chain: INPUT
            protocol: tcp
            destination_port: 2224
            jump: ACCEPT
            action: insert
            rule_num: 6
            comment: ALLOW PCSD
      when: pcmk_reg_iptables.stdout_lines|length > 11
  when: pcmk_reg_cluster_status.stdout is not search('Cluster Status')

- name: PCSd service enabled
  systemd:
    name: pcsd.service
    state: started
    enabled: yes
  register: pcmk_reg_pcsd_start

- name: Pause for 5s
  pause:
    seconds: 5
  when: pcmk_reg_pcsd_start.changed

- name: master section
  block:
    - name: Get node list
      shell: >
        pcs status nodes corosync | awk '/Online/ { for (i=2; i<=NF; i++) print $i }'
      register: pcmk_reg_node_list
      failed_when:
        - pcmk_reg_node_list.rc != 0
        - pcmk_reg_node_list.stderr is not search('No such file or directory')
      changed_when: no

    - name: Auth cluster members
      command:
        pcs cluster auth {{ node }}
        -u hacluster -p {{ pcmk_hacluster_password }}
      when: node not in pcmk_reg_node_list.stdout_lines
      register: pcmk_reg_auth
      changed_when: pcmk_reg_auth.stdout is not search('Already authorized')
      loop: "{{ groups[pcmk_pool] }}"
      loop_control:
        loop_var: node

    - name: Cluster setup
      command: >
        pcs cluster setup
        --name {{ pcmk_cluster_name|d('CLUSTER-' ~ pcmk_pool|upper) }}
        {% for node in groups[pcmk_pool] %}
        {{ node }}
        {% endfor %}
      args:
        creates: "/etc/corosync/corosync.conf"

    - name: cluster start
      command: >
        pcs cluster start --all
  when:
    - inventory_hostname == pcmk_master
    - pcmk_reg_cluster_status.stdout is not search('Cluster Status')

- name: Cluster services enabled
  systemd:
    name: "{{ item }}.service"
    state: started
    enabled: yes
  loop: [ corosync, pacemaker ]

- name: Periodic restart of pcsd
  cron:
    name: pcsd_restart
    job: "/usr/bin/systemctl restart pcsd.service"
    cron_file: "{{ pcmk_cron_file }}"
    special_time: daily
    user: root
    state: "{{ pcmk_pcsd_restart_daily|ternary('present', 'absent') }}"
  notify: reload crond
...
