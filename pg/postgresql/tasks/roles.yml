---
- name: Become section
  block:
    - name: Get recovery status
      command: >
        psql -AXtc "SELECT pg_is_in_recovery()"
      register: pg_reg_inrec
      changed_when: false
      failed_when: false

    - name: Actions if not is in recovery
      block:
        - name: Add roles (users)
          postgresql_user:
            name: "{{ item.name }}"
            password: "{{ item.password|d('~') }}"
            encrypted: yes
            state: present
            role_attr_flags: "{{ item.attrs|d('LOGIN') }}"
          loop: >
            {{ postgresql_roles
            |rejectattr('name', 'equalto', 'all')
            |rejectattr('state', 'sameas', false)
            |list }}
          loop_control:
            label: "{{ item.name }}"

        - name: Manage databases
          postgresql_db:
            name: "{{ item.name }}"
            owner: "{{ item.owner|d(item.name) }}"
            state: "{{ item.state|d(True)|ternary('present', 'absent') }}"
          loop: >
            {{ postgresql_db
            |rejectattr('name', 'equalto', 'all')
            |rejectattr('name', 'equalto', 'sameuser')
            |rejectattr('name', 'equalto', 'samerole')
            |list }}
          loop_control:
            label: "{{ item.name }}"

        - name: Manage extensions
          postgresql_ext:
            name: "{{ item[1] }}"
            db: "{{ item[0].name }}"
          loop: >
            {{ postgresql_db
            |rejectattr('name', 'equalto', 'all')
            |rejectattr('name', 'equalto', 'sameuser')
            |rejectattr('name', 'equalto', 'samerole')
            |rejectattr('state', 'sameas', false)
            |list
            |subelements('ext', 'skip_missing=True') }}
          loop_control:
            label: "{{ item[0].name }}: {{ item[1]|d(null) }}"

        - name: Remove roles (users)
          postgresql_user:
            name: "{{ item.name }}"
            state: absent
          loop: >
            {{ postgresql_roles
            |rejectattr('name', 'equalto', 'all')
            |selectattr('state', 'sameas', false)
            |list }}
          loop_control:
            label: "{{ item.name }}"
          register: postgresql_reg_roles_remove
          failed_when: >
            postgresql_reg_roles_remove is failed
            and 'nable to remove user' not in postgresql_reg_roles_remove.msg
      when: pg_reg_inrec.stdout is search('f')

    - name: Manage pg_hba
      postgresql_pg_hba:
        dest: "/var/lib/pgsql/{{ postgresql_version_raw }}/data/pg_hba.conf"
        contype: "{{ item[1].contype|d('host') }}"
        users: "{{ item[0].name }}"
        source: "{{ item[1].source }}"
        databases: "{{ item[1].databases|d(item[0].name) }}"
        method: "{{ item[1].method|d(omit) }}"
        options: "{{ item[1].options|d(omit) }}"
        state: "{{ item[0].state|d(True)|ternary('present', 'absent') }}"
      loop: >
        {{ postgresql_roles|subelements('hba', skip_missing=True) }}
      loop_control:
        label: "{{ item[0].name }}: {{ item[1].databases|d(item[0].name) }}"
      notify: reload postgresql direct
  become: yes
  become_user: "{{ postgresql_user.name|d('postgres') }}"
...
